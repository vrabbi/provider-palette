// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this AKSCluster.
func (mg *AKSCluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &AzureCloudAccountList{},
			Managed: &AzureCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &AzureCloudAccountList{},
			Managed: &AzureCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this AWSCluster.
func (mg *AWSCluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &AWSCloudAccountList{},
			Managed: &AWSCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &AWSCloudAccountList{},
			Managed: &AWSCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this Application.
func (mg *Application) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationProfileUID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ApplicationProfileUIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationProfileUIDSelector,
		To: reference.To{
			List:    &ApplicationProfileList{},
			Managed: &ApplicationProfile{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationProfileUID")
	}
	mg.Spec.ForProvider.ApplicationProfileUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationProfileUIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Config); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Config[i3].ClusterGroupUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Config[i3].ClusterGroupUIDRef,
			Selector:     mg.Spec.ForProvider.Config[i3].ClusterGroupUIDSelector,
			To: reference.To{
				List:    &ClusterGroupList{},
				Managed: &ClusterGroup{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Config[i3].ClusterGroupUID")
		}
		mg.Spec.ForProvider.Config[i3].ClusterGroupUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Config[i3].ClusterGroupUIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Config); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Config[i3].ClusterUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Config[i3].ClusterUIDRef,
			Selector:     mg.Spec.ForProvider.Config[i3].ClusterUIDSelector,
			To: reference.To{
				List:    &VirtualClusterList{},
				Managed: &VirtualCluster{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Config[i3].ClusterUID")
		}
		mg.Spec.ForProvider.Config[i3].ClusterUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Config[i3].ClusterUIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationProfileUID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ApplicationProfileUIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationProfileUIDSelector,
		To: reference.To{
			List:    &ApplicationProfileList{},
			Managed: &ApplicationProfile{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationProfileUID")
	}
	mg.Spec.InitProvider.ApplicationProfileUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationProfileUIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Config); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Config[i3].ClusterGroupUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Config[i3].ClusterGroupUIDRef,
			Selector:     mg.Spec.InitProvider.Config[i3].ClusterGroupUIDSelector,
			To: reference.To{
				List:    &ClusterGroupList{},
				Managed: &ClusterGroup{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Config[i3].ClusterGroupUID")
		}
		mg.Spec.InitProvider.Config[i3].ClusterGroupUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Config[i3].ClusterGroupUIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Config); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Config[i3].ClusterUID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Config[i3].ClusterUIDRef,
			Selector:     mg.Spec.InitProvider.Config[i3].ClusterUIDSelector,
			To: reference.To{
				List:    &VirtualClusterList{},
				Managed: &VirtualCluster{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Config[i3].ClusterUID")
		}
		mg.Spec.InitProvider.Config[i3].ClusterUID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Config[i3].ClusterUIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this AzureCluster.
func (mg *AzureCluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &AzureCloudAccountList{},
			Managed: &AzureCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &AzureCloudAccountList{},
			Managed: &AzureCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this ClusterGroup.
func (mg *ClusterGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this CustomCloudCluster.
func (mg *CustomCloudCluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &CustomCloudAccountList{},
			Managed: &CustomCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &CustomCloudAccountList{},
			Managed: &CustomCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this EKSCluster.
func (mg *EKSCluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &AWSCloudAccountList{},
			Managed: &AWSCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &AWSCloudAccountList{},
			Managed: &AWSCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this GCPCluster.
func (mg *GCPCluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &GCPCloudAccountList{},
			Managed: &GCPCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &GCPCloudAccountList{},
			Managed: &GCPCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this GKECluster.
func (mg *GKECluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &GCPCloudAccountList{},
			Managed: &GCPCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &GCPCloudAccountList{},
			Managed: &GCPCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this RegistrationToken.
func (mg *RegistrationToken) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectUID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ProjectUIDRef,
		Selector:     mg.Spec.ForProvider.ProjectUIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectUID")
	}
	mg.Spec.ForProvider.ProjectUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectUIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectUID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ProjectUIDRef,
		Selector:     mg.Spec.InitProvider.ProjectUIDSelector,
		To: reference.To{
			List:    &ProjectList{},
			Managed: &Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectUID")
	}
	mg.Spec.InitProvider.ProjectUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectUIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Team.
func (mg *Team) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ProjectRoleMapping); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectRoleMapping[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ProjectRoleMapping[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ProjectRoleMapping[i3].IDSelector,
			To: reference.To{
				List:    &ProjectList{},
				Managed: &Project{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ProjectRoleMapping[i3].ID")
		}
		mg.Spec.ForProvider.ProjectRoleMapping[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ProjectRoleMapping[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ProjectRoleMapping); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ProjectRoleMapping[i3].Roles),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.ProjectRoleMapping[i3].RolesRefs,
			Selector:      mg.Spec.ForProvider.ProjectRoleMapping[i3].RolesSelector,
			To: reference.To{
				List:    &RoleList{},
				Managed: &Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ProjectRoleMapping[i3].Roles")
		}
		mg.Spec.ForProvider.ProjectRoleMapping[i3].Roles = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.ProjectRoleMapping[i3].RolesRefs = mrsp.ResolvedReferences

	}
	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.TenantRoleMapping),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.TenantRoleMappingRefs,
		Selector:      mg.Spec.ForProvider.TenantRoleMappingSelector,
		To: reference.To{
			List:    &RoleList{},
			Managed: &Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TenantRoleMapping")
	}
	mg.Spec.ForProvider.TenantRoleMapping = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.TenantRoleMappingRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Users),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.UsersRefs,
		Selector:      mg.Spec.ForProvider.UsersSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Users")
	}
	mg.Spec.ForProvider.Users = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.UsersRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.ForProvider.WorkspaceRoleMapping); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WorkspaceRoleMapping[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.WorkspaceRoleMapping[i3].IDRef,
			Selector:     mg.Spec.ForProvider.WorkspaceRoleMapping[i3].IDSelector,
			To: reference.To{
				List:    &ProjectList{},
				Managed: &Project{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.WorkspaceRoleMapping[i3].ID")
		}
		mg.Spec.ForProvider.WorkspaceRoleMapping[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.WorkspaceRoleMapping[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.WorkspaceRoleMapping); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.WorkspaceRoleMapping[i3].Workspace); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WorkspaceRoleMapping[i3].Workspace[i4].ID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.WorkspaceRoleMapping[i3].Workspace[i4].IDRef,
				Selector:     mg.Spec.ForProvider.WorkspaceRoleMapping[i3].Workspace[i4].IDSelector,
				To: reference.To{
					List:    &WorkspaceList{},
					Managed: &Workspace{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.WorkspaceRoleMapping[i3].Workspace[i4].ID")
			}
			mg.Spec.ForProvider.WorkspaceRoleMapping[i3].Workspace[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.WorkspaceRoleMapping[i3].Workspace[i4].IDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.WorkspaceRoleMapping); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.WorkspaceRoleMapping[i3].Workspace); i4++ {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.WorkspaceRoleMapping[i3].Workspace[i4].Roles),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.ForProvider.WorkspaceRoleMapping[i3].Workspace[i4].RolesRefs,
				Selector:      mg.Spec.ForProvider.WorkspaceRoleMapping[i3].Workspace[i4].RolesSelector,
				To: reference.To{
					List:    &RoleList{},
					Managed: &Role{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.WorkspaceRoleMapping[i3].Workspace[i4].Roles")
			}
			mg.Spec.ForProvider.WorkspaceRoleMapping[i3].Workspace[i4].Roles = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.WorkspaceRoleMapping[i3].Workspace[i4].RolesRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ProjectRoleMapping); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectRoleMapping[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ProjectRoleMapping[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ProjectRoleMapping[i3].IDSelector,
			To: reference.To{
				List:    &ProjectList{},
				Managed: &Project{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ProjectRoleMapping[i3].ID")
		}
		mg.Spec.InitProvider.ProjectRoleMapping[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ProjectRoleMapping[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ProjectRoleMapping); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ProjectRoleMapping[i3].Roles),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.InitProvider.ProjectRoleMapping[i3].RolesRefs,
			Selector:      mg.Spec.InitProvider.ProjectRoleMapping[i3].RolesSelector,
			To: reference.To{
				List:    &RoleList{},
				Managed: &Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ProjectRoleMapping[i3].Roles")
		}
		mg.Spec.InitProvider.ProjectRoleMapping[i3].Roles = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.ProjectRoleMapping[i3].RolesRefs = mrsp.ResolvedReferences

	}
	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.TenantRoleMapping),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.TenantRoleMappingRefs,
		Selector:      mg.Spec.InitProvider.TenantRoleMappingSelector,
		To: reference.To{
			List:    &RoleList{},
			Managed: &Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TenantRoleMapping")
	}
	mg.Spec.InitProvider.TenantRoleMapping = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.TenantRoleMappingRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Users),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.UsersRefs,
		Selector:      mg.Spec.InitProvider.UsersSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Users")
	}
	mg.Spec.InitProvider.Users = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.UsersRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.WorkspaceRoleMapping); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.WorkspaceRoleMapping[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.WorkspaceRoleMapping[i3].IDRef,
			Selector:     mg.Spec.InitProvider.WorkspaceRoleMapping[i3].IDSelector,
			To: reference.To{
				List:    &ProjectList{},
				Managed: &Project{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.WorkspaceRoleMapping[i3].ID")
		}
		mg.Spec.InitProvider.WorkspaceRoleMapping[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.WorkspaceRoleMapping[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.WorkspaceRoleMapping); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.WorkspaceRoleMapping[i3].Workspace); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.WorkspaceRoleMapping[i3].Workspace[i4].ID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.WorkspaceRoleMapping[i3].Workspace[i4].IDRef,
				Selector:     mg.Spec.InitProvider.WorkspaceRoleMapping[i3].Workspace[i4].IDSelector,
				To: reference.To{
					List:    &WorkspaceList{},
					Managed: &Workspace{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.WorkspaceRoleMapping[i3].Workspace[i4].ID")
			}
			mg.Spec.InitProvider.WorkspaceRoleMapping[i3].Workspace[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.WorkspaceRoleMapping[i3].Workspace[i4].IDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.WorkspaceRoleMapping); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.WorkspaceRoleMapping[i3].Workspace); i4++ {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.WorkspaceRoleMapping[i3].Workspace[i4].Roles),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.InitProvider.WorkspaceRoleMapping[i3].Workspace[i4].RolesRefs,
				Selector:      mg.Spec.InitProvider.WorkspaceRoleMapping[i3].Workspace[i4].RolesSelector,
				To: reference.To{
					List:    &RoleList{},
					Managed: &Role{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.WorkspaceRoleMapping[i3].Workspace[i4].Roles")
			}
			mg.Spec.InitProvider.WorkspaceRoleMapping[i3].Workspace[i4].Roles = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.WorkspaceRoleMapping[i3].Workspace[i4].RolesRefs = mrsp.ResolvedReferences

		}
	}

	return nil
}

// ResolveReferences of this User.
func (mg *User) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ProjectRole); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectRole[i3].ProjectID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ProjectRole[i3].ProjectIDRef,
			Selector:     mg.Spec.ForProvider.ProjectRole[i3].ProjectIDSelector,
			To: reference.To{
				List:    &ProjectList{},
				Managed: &Project{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ProjectRole[i3].ProjectID")
		}
		mg.Spec.ForProvider.ProjectRole[i3].ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ProjectRole[i3].ProjectIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ProjectRole); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ProjectRole[i3].RoleIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.ProjectRole[i3].RoleIdsRefs,
			Selector:      mg.Spec.ForProvider.ProjectRole[i3].RoleIdsSelector,
			To: reference.To{
				List:    &RoleList{},
				Managed: &Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ProjectRole[i3].RoleIds")
		}
		mg.Spec.ForProvider.ProjectRole[i3].RoleIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.ProjectRole[i3].RoleIdsRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ResourceRole); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ResourceRole[i3].FilterIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.ResourceRole[i3].FilterIdsRefs,
			Selector:      mg.Spec.ForProvider.ResourceRole[i3].FilterIdsSelector,
			To: reference.To{
				List:    &FilterList{},
				Managed: &Filter{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ResourceRole[i3].FilterIds")
		}
		mg.Spec.ForProvider.ResourceRole[i3].FilterIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.ResourceRole[i3].FilterIdsRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ResourceRole); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ResourceRole[i3].ProjectIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.ResourceRole[i3].ProjectIdsRefs,
			Selector:      mg.Spec.ForProvider.ResourceRole[i3].ProjectIdsSelector,
			To: reference.To{
				List:    &ProjectList{},
				Managed: &Project{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ResourceRole[i3].ProjectIds")
		}
		mg.Spec.ForProvider.ResourceRole[i3].ProjectIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.ResourceRole[i3].ProjectIdsRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ResourceRole); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ResourceRole[i3].RoleIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.ResourceRole[i3].RoleIdsRefs,
			Selector:      mg.Spec.ForProvider.ResourceRole[i3].RoleIdsSelector,
			To: reference.To{
				List:    &RoleList{},
				Managed: &Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ResourceRole[i3].RoleIds")
		}
		mg.Spec.ForProvider.ResourceRole[i3].RoleIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.ResourceRole[i3].RoleIdsRefs = mrsp.ResolvedReferences

	}
	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.TeamIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.TeamIdsRefs,
		Selector:      mg.Spec.ForProvider.TeamIdsSelector,
		To: reference.To{
			List:    &TeamList{},
			Managed: &Team{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TeamIds")
	}
	mg.Spec.ForProvider.TeamIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.TeamIdsRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.TenantRole),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.TenantRoleRefs,
		Selector:      mg.Spec.ForProvider.TenantRoleSelector,
		To: reference.To{
			List:    &RoleList{},
			Managed: &Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TenantRole")
	}
	mg.Spec.ForProvider.TenantRole = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.TenantRoleRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.ForProvider.WorkspaceRole); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WorkspaceRole[i3].ProjectID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.WorkspaceRole[i3].ProjectIDRef,
			Selector:     mg.Spec.ForProvider.WorkspaceRole[i3].ProjectIDSelector,
			To: reference.To{
				List:    &ProjectList{},
				Managed: &Project{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.WorkspaceRole[i3].ProjectID")
		}
		mg.Spec.ForProvider.WorkspaceRole[i3].ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.WorkspaceRole[i3].ProjectIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.WorkspaceRole); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.WorkspaceRole[i3].Workspace); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.WorkspaceRole[i3].Workspace[i4].ID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.WorkspaceRole[i3].Workspace[i4].IDRef,
				Selector:     mg.Spec.ForProvider.WorkspaceRole[i3].Workspace[i4].IDSelector,
				To: reference.To{
					List:    &WorkspaceList{},
					Managed: &Workspace{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.WorkspaceRole[i3].Workspace[i4].ID")
			}
			mg.Spec.ForProvider.WorkspaceRole[i3].Workspace[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.WorkspaceRole[i3].Workspace[i4].IDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.WorkspaceRole); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.WorkspaceRole[i3].Workspace); i4++ {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.WorkspaceRole[i3].Workspace[i4].RoleIds),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.ForProvider.WorkspaceRole[i3].Workspace[i4].RoleIdsRefs,
				Selector:      mg.Spec.ForProvider.WorkspaceRole[i3].Workspace[i4].RoleIdsSelector,
				To: reference.To{
					List:    &RoleList{},
					Managed: &Role{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.WorkspaceRole[i3].Workspace[i4].RoleIds")
			}
			mg.Spec.ForProvider.WorkspaceRole[i3].Workspace[i4].RoleIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.WorkspaceRole[i3].Workspace[i4].RoleIdsRefs = mrsp.ResolvedReferences

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ProjectRole); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectRole[i3].ProjectID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ProjectRole[i3].ProjectIDRef,
			Selector:     mg.Spec.InitProvider.ProjectRole[i3].ProjectIDSelector,
			To: reference.To{
				List:    &ProjectList{},
				Managed: &Project{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ProjectRole[i3].ProjectID")
		}
		mg.Spec.InitProvider.ProjectRole[i3].ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ProjectRole[i3].ProjectIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ProjectRole); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ProjectRole[i3].RoleIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.InitProvider.ProjectRole[i3].RoleIdsRefs,
			Selector:      mg.Spec.InitProvider.ProjectRole[i3].RoleIdsSelector,
			To: reference.To{
				List:    &RoleList{},
				Managed: &Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ProjectRole[i3].RoleIds")
		}
		mg.Spec.InitProvider.ProjectRole[i3].RoleIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.ProjectRole[i3].RoleIdsRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ResourceRole); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ResourceRole[i3].FilterIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.InitProvider.ResourceRole[i3].FilterIdsRefs,
			Selector:      mg.Spec.InitProvider.ResourceRole[i3].FilterIdsSelector,
			To: reference.To{
				List:    &FilterList{},
				Managed: &Filter{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ResourceRole[i3].FilterIds")
		}
		mg.Spec.InitProvider.ResourceRole[i3].FilterIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.ResourceRole[i3].FilterIdsRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ResourceRole); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ResourceRole[i3].ProjectIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.InitProvider.ResourceRole[i3].ProjectIdsRefs,
			Selector:      mg.Spec.InitProvider.ResourceRole[i3].ProjectIdsSelector,
			To: reference.To{
				List:    &ProjectList{},
				Managed: &Project{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ResourceRole[i3].ProjectIds")
		}
		mg.Spec.InitProvider.ResourceRole[i3].ProjectIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.ResourceRole[i3].ProjectIdsRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ResourceRole); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ResourceRole[i3].RoleIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.InitProvider.ResourceRole[i3].RoleIdsRefs,
			Selector:      mg.Spec.InitProvider.ResourceRole[i3].RoleIdsSelector,
			To: reference.To{
				List:    &RoleList{},
				Managed: &Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ResourceRole[i3].RoleIds")
		}
		mg.Spec.InitProvider.ResourceRole[i3].RoleIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.ResourceRole[i3].RoleIdsRefs = mrsp.ResolvedReferences

	}
	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.TeamIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.TeamIdsRefs,
		Selector:      mg.Spec.InitProvider.TeamIdsSelector,
		To: reference.To{
			List:    &TeamList{},
			Managed: &Team{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TeamIds")
	}
	mg.Spec.InitProvider.TeamIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.TeamIdsRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.TenantRole),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.TenantRoleRefs,
		Selector:      mg.Spec.InitProvider.TenantRoleSelector,
		To: reference.To{
			List:    &RoleList{},
			Managed: &Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.TenantRole")
	}
	mg.Spec.InitProvider.TenantRole = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.TenantRoleRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.WorkspaceRole); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.WorkspaceRole[i3].ProjectID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.WorkspaceRole[i3].ProjectIDRef,
			Selector:     mg.Spec.InitProvider.WorkspaceRole[i3].ProjectIDSelector,
			To: reference.To{
				List:    &ProjectList{},
				Managed: &Project{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.WorkspaceRole[i3].ProjectID")
		}
		mg.Spec.InitProvider.WorkspaceRole[i3].ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.WorkspaceRole[i3].ProjectIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.WorkspaceRole); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.WorkspaceRole[i3].Workspace); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.WorkspaceRole[i3].Workspace[i4].ID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.WorkspaceRole[i3].Workspace[i4].IDRef,
				Selector:     mg.Spec.InitProvider.WorkspaceRole[i3].Workspace[i4].IDSelector,
				To: reference.To{
					List:    &WorkspaceList{},
					Managed: &Workspace{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.WorkspaceRole[i3].Workspace[i4].ID")
			}
			mg.Spec.InitProvider.WorkspaceRole[i3].Workspace[i4].ID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.WorkspaceRole[i3].Workspace[i4].IDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.WorkspaceRole); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.WorkspaceRole[i3].Workspace); i4++ {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.WorkspaceRole[i3].Workspace[i4].RoleIds),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.InitProvider.WorkspaceRole[i3].Workspace[i4].RoleIdsRefs,
				Selector:      mg.Spec.InitProvider.WorkspaceRole[i3].Workspace[i4].RoleIdsSelector,
				To: reference.To{
					List:    &RoleList{},
					Managed: &Role{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.WorkspaceRole[i3].Workspace[i4].RoleIds")
			}
			mg.Spec.InitProvider.WorkspaceRole[i3].Workspace[i4].RoleIds = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.InitProvider.WorkspaceRole[i3].Workspace[i4].RoleIdsRefs = mrsp.ResolvedReferences

		}
	}

	return nil
}

// ResolveReferences of this VSphereCluster.
func (mg *VSphereCluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CloudAccountIDRef,
		Selector:     mg.Spec.ForProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &VSphereCloudAccountList{},
			Managed: &VSphereCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CloudAccountID")
	}
	mg.Spec.ForProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.MachinePool); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.MachinePool[i3].Placement); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MachinePool[i3].Placement[i4].StaticIPPoolID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.MachinePool[i3].Placement[i4].StaticIPPoolIDRef,
				Selector:     mg.Spec.ForProvider.MachinePool[i3].Placement[i4].StaticIPPoolIDSelector,
				To: reference.To{
					List:    &PrivateCloudGatewayIPPoolList{},
					Managed: &PrivateCloudGatewayIPPool{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.MachinePool[i3].Placement[i4].StaticIPPoolID")
			}
			mg.Spec.ForProvider.MachinePool[i3].Placement[i4].StaticIPPoolID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.MachinePool[i3].Placement[i4].StaticIPPoolIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CloudAccountID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CloudAccountIDRef,
		Selector:     mg.Spec.InitProvider.CloudAccountIDSelector,
		To: reference.To{
			List:    &VSphereCloudAccountList{},
			Managed: &VSphereCloudAccount{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CloudAccountID")
	}
	mg.Spec.InitProvider.CloudAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CloudAccountIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.MachinePool); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.MachinePool[i3].Placement); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MachinePool[i3].Placement[i4].StaticIPPoolID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.MachinePool[i3].Placement[i4].StaticIPPoolIDRef,
				Selector:     mg.Spec.InitProvider.MachinePool[i3].Placement[i4].StaticIPPoolIDSelector,
				To: reference.To{
					List:    &PrivateCloudGatewayIPPoolList{},
					Managed: &PrivateCloudGatewayIPPool{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.MachinePool[i3].Placement[i4].StaticIPPoolID")
			}
			mg.Spec.InitProvider.MachinePool[i3].Placement[i4].StaticIPPoolID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.MachinePool[i3].Placement[i4].StaticIPPoolIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this VirtualCluster.
func (mg *VirtualCluster) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterGroupUID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ClusterGroupUIDRef,
		Selector:     mg.Spec.ForProvider.ClusterGroupUIDSelector,
		To: reference.To{
			List:    &ClusterGroupList{},
			Managed: &ClusterGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClusterGroupUID")
	}
	mg.Spec.ForProvider.ClusterGroupUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClusterGroupUIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.ForProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.ForProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterGroupUID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ClusterGroupUIDRef,
		Selector:     mg.Spec.InitProvider.ClusterGroupUIDSelector,
		To: reference.To{
			List:    &ClusterGroupList{},
			Managed: &ClusterGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClusterGroupUID")
	}
	mg.Spec.InitProvider.ClusterGroupUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClusterGroupUIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClusterProfile[i3].IDRef,
			Selector:     mg.Spec.InitProvider.ClusterProfile[i3].IDSelector,
			To: reference.To{
				List:    &ClusterProfileList{},
				Managed: &ClusterProfile{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].ID")
		}
		mg.Spec.InitProvider.ClusterProfile[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ClusterProfile[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.ClusterProfile); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ClusterProfile[i3].Pack); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef,
				Selector:     mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDSelector,
				To: reference.To{
					List:    &OCIRegistryList{},
					Managed: &OCIRegistry{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID")
			}
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ClusterProfile[i3].Pack[i4].RegistryUIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this Workspace.
func (mg *Workspace) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.BackupPolicy); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef,
			Selector:     mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDSelector,
			To: reference.To{
				List:    &BackupStorageLocationList{},
				Managed: &BackupStorageLocation{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID")
		}
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.BackupPolicy[i3].BackupLocationIDRef = rsp.ResolvedReference

	}

	return nil
}
