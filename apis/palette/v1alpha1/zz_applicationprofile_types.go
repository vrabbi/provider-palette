// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationProfileInitParameters struct {

	// (String) The cloud provider the profile is eligible for. Default value is all.
	// The cloud provider the profile is eligible for. Default value is `all`.
	Cloud *string `json:"cloud,omitempty" tf:"cloud,omitempty"`

	// (String) Context of the profile. Allowed values are project, cluster, or namespace. Default value is project.If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// Context of the profile. Allowed values are `project`, `cluster`, or `namespace`. Default value is `project`.If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) Description of the profile.
	// Description of the profile.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Name of the application profile
	// Name of the application profile
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1) A list of packs to be applied to the application profile. (see below for nested schema)
	// A list of packs to be applied to the application profile.
	Pack []PackInitParameters `json:"pack,omitempty" tf:"pack,omitempty"`

	// (Set of String) A list of tags to be applied to the application profile. Tags must be in the form of key:value.
	// A list of tags to be applied to the application profile. Tags must be in the form of `key:value`.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Version of the profile. Default value is 1.0.0.
	// Version of the profile. Default value is 1.0.0.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ApplicationProfileObservation struct {

	// (String) The cloud provider the profile is eligible for. Default value is all.
	// The cloud provider the profile is eligible for. Default value is `all`.
	Cloud *string `json:"cloud,omitempty" tf:"cloud,omitempty"`

	// (String) Context of the profile. Allowed values are project, cluster, or namespace. Default value is project.If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// Context of the profile. Allowed values are `project`, `cluster`, or `namespace`. Default value is `project`.If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) Description of the profile.
	// Description of the profile.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the application profile
	// Name of the application profile
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1) A list of packs to be applied to the application profile. (see below for nested schema)
	// A list of packs to be applied to the application profile.
	Pack []PackObservation `json:"pack,omitempty" tf:"pack,omitempty"`

	// (Set of String) A list of tags to be applied to the application profile. Tags must be in the form of key:value.
	// A list of tags to be applied to the application profile. Tags must be in the form of `key:value`.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Version of the profile. Default value is 1.0.0.
	// Version of the profile. Default value is 1.0.0.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ApplicationProfileParameters struct {

	// (String) The cloud provider the profile is eligible for. Default value is all.
	// The cloud provider the profile is eligible for. Default value is `all`.
	// +kubebuilder:validation:Optional
	Cloud *string `json:"cloud,omitempty" tf:"cloud,omitempty"`

	// (String) Context of the profile. Allowed values are project, cluster, or namespace. Default value is project.If  the project context is specified, the project name will sourced from the provider configuration parameter project_name.
	// Context of the profile. Allowed values are `project`, `cluster`, or `namespace`. Default value is `project`.If  the `project` context is specified, the project name will sourced from the provider configuration parameter [`project_name`](https://registry.io/providers/spectrocloud/spectrocloud/latest/docs#schema).
	// +kubebuilder:validation:Optional
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) Description of the profile.
	// Description of the profile.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Name of the application profile
	// Name of the application profile
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1) A list of packs to be applied to the application profile. (see below for nested schema)
	// A list of packs to be applied to the application profile.
	// +kubebuilder:validation:Optional
	Pack []PackParameters `json:"pack,omitempty" tf:"pack,omitempty"`

	// (Set of String) A list of tags to be applied to the application profile. Tags must be in the form of key:value.
	// A list of tags to be applied to the application profile. Tags must be in the form of `key:value`.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Version of the profile. Default value is 1.0.0.
	// Version of the profile. Default value is 1.0.0.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ManifestInitParameters struct {

	// (String) The content of the manifest.
	// The content of the manifest.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (String) Name of the application profile
	// The name of the manifest.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ManifestObservation struct {

	// (String) The content of the manifest.
	// The content of the manifest.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// (String) Name of the application profile
	// The name of the manifest.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The unique id of the pack. This is a computed field and is not required to be set.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type ManifestParameters struct {

	// (String) The content of the manifest.
	// The content of the manifest.
	// +kubebuilder:validation:Optional
	Content *string `json:"content" tf:"content,omitempty"`

	// (String) Name of the application profile
	// The name of the manifest.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type PackInitParameters struct {

	// 3 would be installed before an app profile with a higher number value. No upper and lower limits exist, and you may specify positive and negative integers. The default value is 0.
	// The installation priority order of the app profile. The order of priority goes from lowest number to highest number. For example, a value of `-3` would be installed before an app profile with a higher number value. No upper and lower limits exist, and you may specify positive and negative integers. The default value is `0`.
	InstallOrder *float64 `json:"installOrder,omitempty" tf:"install_order,omitempty"`

	// (Block List) The manifest of the pack. (see below for nested schema)
	// The manifest of the pack.
	Manifest []ManifestInitParameters `json:"manifest,omitempty" tf:"manifest,omitempty"`

	// (String) Name of the application profile
	// The name of the specified pack.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Map of String) The various properties required by different database tiers eg: databaseName and databaseVolumeSize size for Redis etc.
	// The various properties required by different database tiers eg: `databaseName` and `databaseVolumeSize` size for Redis etc.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) The unique id of the registry to be used for the pack.
	// The unique id of the registry to be used for the pack.
	RegistryUID *string `json:"registryUid,omitempty" tf:"registry_uid,omitempty"`

	// (String) The unique id of the pack to be used as the source for the pack.
	// The unique id of the pack to be used as the source for the pack.
	SourceAppTier *string `json:"sourceAppTier,omitempty" tf:"source_app_tier,omitempty"`

	// (String) The identifier or version to label the pack.
	// The identifier or version to label the pack.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// instance.
	// The type of Pack. Allowed values are `container`, `helm`, `manifest`, or `operator-instance`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The unique id of the pack. This is a computed field and is not required to be set.
	// The unique id of the pack. This is a computed field and is not required to be set.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// (String) The values to be used for the pack. This is a stringified JSON object.
	// The values to be used for the pack. This is a stringified JSON object.
	Values *string `json:"values,omitempty" tf:"values,omitempty"`
}

type PackObservation struct {

	// 3 would be installed before an app profile with a higher number value. No upper and lower limits exist, and you may specify positive and negative integers. The default value is 0.
	// The installation priority order of the app profile. The order of priority goes from lowest number to highest number. For example, a value of `-3` would be installed before an app profile with a higher number value. No upper and lower limits exist, and you may specify positive and negative integers. The default value is `0`.
	InstallOrder *float64 `json:"installOrder,omitempty" tf:"install_order,omitempty"`

	// (Block List) The manifest of the pack. (see below for nested schema)
	// The manifest of the pack.
	Manifest []ManifestObservation `json:"manifest,omitempty" tf:"manifest,omitempty"`

	// (String) Name of the application profile
	// The name of the specified pack.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Map of String) The various properties required by different database tiers eg: databaseName and databaseVolumeSize size for Redis etc.
	// The various properties required by different database tiers eg: `databaseName` and `databaseVolumeSize` size for Redis etc.
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) The unique id of the registry to be used for the pack.
	// The unique id of the registry to be used for the pack.
	RegistryUID *string `json:"registryUid,omitempty" tf:"registry_uid,omitempty"`

	// (String) The unique id of the pack to be used as the source for the pack.
	// The unique id of the pack to be used as the source for the pack.
	SourceAppTier *string `json:"sourceAppTier,omitempty" tf:"source_app_tier,omitempty"`

	// (String) The identifier or version to label the pack.
	// The identifier or version to label the pack.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// instance.
	// The type of Pack. Allowed values are `container`, `helm`, `manifest`, or `operator-instance`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The unique id of the pack. This is a computed field and is not required to be set.
	// The unique id of the pack. This is a computed field and is not required to be set.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// (String) The values to be used for the pack. This is a stringified JSON object.
	// The values to be used for the pack. This is a stringified JSON object.
	Values *string `json:"values,omitempty" tf:"values,omitempty"`
}

type PackParameters struct {

	// 3 would be installed before an app profile with a higher number value. No upper and lower limits exist, and you may specify positive and negative integers. The default value is 0.
	// The installation priority order of the app profile. The order of priority goes from lowest number to highest number. For example, a value of `-3` would be installed before an app profile with a higher number value. No upper and lower limits exist, and you may specify positive and negative integers. The default value is `0`.
	// +kubebuilder:validation:Optional
	InstallOrder *float64 `json:"installOrder,omitempty" tf:"install_order,omitempty"`

	// (Block List) The manifest of the pack. (see below for nested schema)
	// The manifest of the pack.
	// +kubebuilder:validation:Optional
	Manifest []ManifestParameters `json:"manifest,omitempty" tf:"manifest,omitempty"`

	// (String) Name of the application profile
	// The name of the specified pack.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Map of String) The various properties required by different database tiers eg: databaseName and databaseVolumeSize size for Redis etc.
	// The various properties required by different database tiers eg: `databaseName` and `databaseVolumeSize` size for Redis etc.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) The unique id of the registry to be used for the pack.
	// The unique id of the registry to be used for the pack.
	// +kubebuilder:validation:Optional
	RegistryUID *string `json:"registryUid,omitempty" tf:"registry_uid,omitempty"`

	// (String) The unique id of the pack to be used as the source for the pack.
	// The unique id of the pack to be used as the source for the pack.
	// +kubebuilder:validation:Optional
	SourceAppTier *string `json:"sourceAppTier,omitempty" tf:"source_app_tier,omitempty"`

	// (String) The identifier or version to label the pack.
	// The identifier or version to label the pack.
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// instance.
	// The type of Pack. Allowed values are `container`, `helm`, `manifest`, or `operator-instance`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The unique id of the pack. This is a computed field and is not required to be set.
	// The unique id of the pack. This is a computed field and is not required to be set.
	// +kubebuilder:validation:Optional
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// (String) The values to be used for the pack. This is a stringified JSON object.
	// The values to be used for the pack. This is a stringified JSON object.
	// +kubebuilder:validation:Optional
	Values *string `json:"values,omitempty" tf:"values,omitempty"`
}

// ApplicationProfileSpec defines the desired state of ApplicationProfile
type ApplicationProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationProfileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ApplicationProfileInitParameters `json:"initProvider,omitempty"`
}

// ApplicationProfileStatus defines the observed state of ApplicationProfile.
type ApplicationProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ApplicationProfile is the Schema for the ApplicationProfiles API. Provisions an Application Profile. App Profiles are templates created with preconfigured services. You can create as many profiles as required, with multiple tiers serving different functionalities per use case.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,palette}
type ApplicationProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pack) || (has(self.initProvider) && has(self.initProvider.pack))",message="spec.forProvider.pack is a required parameter"
	Spec   ApplicationProfileSpec   `json:"spec"`
	Status ApplicationProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationProfileList contains a list of ApplicationProfiles
type ApplicationProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationProfile `json:"items"`
}

// Repository type metadata.
var (
	ApplicationProfile_Kind             = "ApplicationProfile"
	ApplicationProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApplicationProfile_Kind}.String()
	ApplicationProfile_KindAPIVersion   = ApplicationProfile_Kind + "." + CRDGroupVersion.String()
	ApplicationProfile_GroupVersionKind = CRDGroupVersion.WithKind(ApplicationProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&ApplicationProfile{}, &ApplicationProfileList{})
}
